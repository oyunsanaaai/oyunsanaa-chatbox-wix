// api/oy-chat.js
export default async function handler(req, res) {
  try {
    const body = await readJson(req);
    const msg = getUserMsg(body);
    if (!msg) {
      return res.status(400).json({ error: 'Empty message' });
    }

    // 1) persona —Å–æ–Ω–≥–æ–∂ system prompt –±“Ø—Ä–¥“Ø“Ø–ª—ç—Ö
    const persona = String(body.persona || 'soft').trim();

    const personaPrompts = {
      soft: `–ß–∏ "–û—é—É–Ω—Å–∞–Ω–∞–∞" ‚Äî –∑”©”©–ª”©–Ω, —Ö–∞–ª–∞–º–∂—Ç–∞–π, —Ö”©–≥–∂–∏–ª—Ç—ç–π.
- –≠—Ö–Ω–∏–π —Ö–∞—Ä–∏—É–ª—Ç 2‚Äì5 ”©–≥“Ø“Ø–ª–±—ç—Ä—Ç –±–∞–≥—Ç–∞–Ω–∞.
- –õ–µ–∫—Ü, –∂–∞–≥—Å–∞–∞–ª—Ç –±–∏—á–∏—Ö–≥“Ø–π; –±–æ–¥–∏—Ç —è—Ä–∏–∞ —à–∏–≥ —Ç–æ–≤—á, –æ–π–ª–≥–æ–º–∂—Ç–æ–π.
- –≠–º–ø–∞—Ç–∏ –∏–ª—ç—Ä—Ö–∏–π–ª—ç—ç–¥, —Ö—ç—Ä—ç–≥—Ç—ç–π –±–æ–ª 1 –∂–∏–∂–∏–≥ –∞–ª—Ö–∞–º —Å–∞–Ω–∞–ª –±–æ–ª–≥–æ.`,
      tough: `–ß–∏ "–û—é—É–Ω—Å–∞–Ω–∞–∞" ‚Äî —Ö–∞—Ç—É—É—Ö–∞–Ω, –∑–æ—Ä–∏–ª–≥–æ —á–∏–≥–ª“Ø“Ø–ª—ç–≥—á.
- 2‚Äì4 ”©–≥“Ø“Ø–ª–±—ç—Ä—ç—ç—Ä —à—É—É–¥ –≥–æ–ª—ã–≥ –Ω—å —Ö—ç–ª.
- "–û–¥–æ–æ —ç—Ö–ª—ç—Ö 1 –∞–ª—Ö–∞–º –Ω—å ‚Ä¶" –≥—ç–∂ —Ç–æ–≤—á —Å–∞–Ω–∞–ª –±–æ–ª–≥–æ.`,
      wise: `–ß–∏ "–û—é—É–Ω—Å–∞–Ω–∞–∞" ‚Äî —É—Ö–∞–∞–ª–∞–≥, —Ç–∞–π–≤–∞–Ω, —Ç—ç–Ω—Ü–≤—ç—Ä—Ç—ç–π.
- –ë–æ–≥–∏–Ω–æ 2‚Äì4 ”©–≥“Ø“Ø–ª–±—ç—Ä.
- –ñ–∏—à—ç—ç, –∞–Ω–∞–ª–æ–≥–∏—Ç–æ–π–≥–æ–æ—Ä –æ–π–ª–≥–æ–º–∂—Ç–æ–π —Ç–∞–π–ª–±–∞—Ä–ª–∞.`,
      parent: `–ß–∏ "–û—é—É–Ω—Å–∞–Ω–∞–∞" ‚Äî —ç—ç–∂/–∞–∞–≤ —à–∏–≥ –¥—É–ª–∞–∞–Ω, —Ö–∞–ª–∞–º–∂—Ç–∞–π.
- –≠—Ö—ç–Ω–¥ —Ç–∞–π–≤—à—Ä—É—É–ª–∂, —Ö–∞–π—Ä –º—ç–¥—Ä“Ø“Ø–ª.
- –•—ç—Ç —É—Ä—Ç –±–∏—à; 2‚Äì5 ”©–≥“Ø“Ø–ª–±—ç—Ä; 1 –∂–∏–∂–∏–≥ –∑”©”©–ª”©–Ω —Å–∞–Ω–∞–ª –Ω—ç–º.`,
    };

    const systemContent =
      personaPrompts[persona] || personaPrompts.soft;

    const messages = [
      { role: 'system', content: systemContent },
      { role: 'user', content: msg },
    ];

    // 2) OpenAI —Ä—É—É –¥—É—É–¥–ª–∞–≥–∞ (–±–æ–≥–∏–Ω–æ –±–∞—Ä–∏—Ö —Ç–æ—Ö–∏—Ä–≥–æ–æ)
    const apiKey = process.env.OPENAI_API_KEY;
    const model = String(body.model || 'gpt-4o-mini').trim();

    const r = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model,
        messages,
        temperature: 0.6,
        top_p: 0.85,
        presence_penalty: 0.2,
        frequency_penalty: 0.8, // –¥–∞–≤—Ç–∞–≥–¥–ª—ã–≥ –±–∞–≥–∞—Å–≥–∞–Ω–∞ ‚Üí –±–æ–≥–∏–Ω–æ—Å–Ω–æ
        max_tokens: Math.min(180, Number(body.max_tokens_hint || 160)),
        stop: ['\n\n', '###'], // —É—Ä—Ç —Ü—É–≤—Ä–∞–ª —Ç–∞–π–ª–±–∞—Ä—ã–≥ –∑–æ–≥—Å–æ–æ–Ω–æ
      }),
    });

    if (!r.ok) {
      const text = await r.text().catch(() => '');
      return res
        .status(r.status)
        .json({ error: 'upstream', detail: text });
    }

    // 3) –•–∞—Ä–∏—É–≥ —Ü—ç–≥—Ü—ç–ª–∂ –±–æ–≥–∏–Ω–æ—Å–≥–æ—Ö
    const data = await r.json();
    let reply = data.choices?.[0]?.message?.content || '';

    const isFirstTurn =
      !Array.isArray(body.history) || body.history.length === 0;

    reply = cleanMarkdown(reply);
    reply = clipReply(reply, { maxSentences: 5, maxChars: 420 });
    reply = addIntroOnce(reply, isFirstTurn, persona);
    reply = addWarmClosing(reply, persona);

    return res
      .status(200)
      .json({ reply, model: data.model, persona });
  } catch (e) {
    console.error(e);
    return res
      .status(500)
      .json({ error: 'server', detail: String(e?.message || e) });
  }
}

/* ---------- –¢—É—Å–ª–∞—Ö —Ñ—É–Ω–∫—Ü—É—É–¥ ---------- */

// Request body —É–Ω—à–∏—Ö
async function readJson(req) {
  if (req.body && typeof req.body === 'object') return req.body;
  const text = await new Response(req.body || null).text();
  try { return JSON.parse(text || '{}'); } catch { return {}; }
}

// frontend-—ç—ç—Å –∏—Ä—Å—ç–Ω –º—ç—Å—Å—ç–∂ –∞–≤–∞—Ö
function getUserMsg(body) {
  if (typeof body?.msg === 'string') return body.msg.trim();
  if (Array.isArray(body?.messages)) {
    const u = body.messages.find(m => m?.role === 'user')?.content;
    if (typeof u === 'string') return u.trim();
  }
  return '';
}

// Markdown —Ç—ç–º–¥—ç–≥–ª—ç–≥—ç—ç –∞—Ä–∏–ª–≥–∞–∂, —Ö–æ–æ—Å–æ–Ω –º”©—Ä –±–∞–≥–∞—Å–≥–∞—Ö
function cleanMarkdown(s = '') {
  return String(s)
    .replace(/^\s*#{1,6}\s*/gm, '')      // # –≥–∞—Ä—á–∏–≥
    .replace(/^\s*[-*]\s+/gm, '‚Ä¢ ')      // bullet-–≥ ‚Ä¢ –±–æ–ª–≥–æ—Ö
    .replace(/\n{3,}/g, '\n\n')          // –æ–ª–æ–Ω —Ö–æ–æ—Å–æ–Ω –º”©—Ä —à–∞—Ö–∞—Ö
    .trim();
}

// 2‚Äì5 ”©–≥“Ø“Ø–ª–±—ç—Ä—Ç –±–∞–≥—Ç–∞–∞—Ö (—ç—Å–≤—ç–ª 420 —Ç—ç–º–¥—ç–≥—Ç)
function clipReply(s, { maxSentences = 5, maxChars = 420 } = {}) {
  let t = s.trim();
  if (t.length <= maxChars) {
    const sent = splitSentences(t);
    if (sent.length <= maxSentences) return t;
  }
  const sent = splitSentences(t).slice(0, maxSentences);
  t = sent.join(' ');
  if (t.length > maxChars) t = t.slice(0, maxChars).replace(/\s+\S*$/, '') + '‚Ä¶';
  return t;
}

function splitSentences(s) {
  // . ! ? ‚Ä¶ –±–æ–ª–æ–Ω —à–∏–Ω—ç –º”©—Ä”©”©—Ä —Ç–∞—Å–ª–∞–Ω–∞
  return s
    .split(/(?<=[\.!?‚Ä¶])\s+|\n+/)
    .map(x => x.trim())
    .filter(Boolean);
}

// –≠—Ö–Ω–∏–π —É–¥–∞–∞–¥ –ª –∑”©”©–ª”©–Ω —ç—Ö–ª—ç–ª –Ω—ç–º—ç—Ö
function addIntroOnce(s, isFirst, persona) {
  if (!isFirst) return s;
  const headByPersona = {
    soft: '–ë–∏ –æ–π–ª–≥–æ–∂ –±–∞–π–Ω–∞. ',
    tough: '–û–π–ª–≥–æ–ª–æ–æ. ',
    wise: '–°–∞–π–Ω –±–∞–π–Ω–∞, –æ–π–ª–≥–æ–∂ –∞–≤–ª–∞–∞. ',
    parent: '–ú–∏–Ω–∏–π —Ö–∞–π—Ä —Ö“Ø–Ω –º–∏–Ω—å, –∑“Ø–≥—ç—ç—Ä –¥—ç—ç. ',
  };
  return (headByPersona[persona] || '–û–π–ª–≥–æ–ª–æ–æ. ') + s;
}

// –î—É–ª–∞–∞–Ω –±–æ–≥–∏–Ω–æ —Ç”©–≥—Å–≥”©–ª (emoji 0‚Äì1)
function addWarmClosing(s, persona) {
  const end =
    persona === 'tough'
      ? ' –û–¥–æ–æ —Ö–∞–º–≥–∏–π–Ω –∂–∏–∂–∏–≥ 1 –∞–ª—Ö–º—ã–≥ —Å–æ–Ω–≥–æ—ë?'
      : persona === 'parent'
      ? ' –•–æ–æ–ª–æ–æ –∏–¥—ç–∂, —É—Å —É—É–≥–∞–∞—Ä–∞–π —à“Ø“Ø. üòä'
      : persona === 'wise'
      ? ' –•—ç—Ä—ç–≤ –±—ç–ª—ç–Ω –±–æ–ª –¥–∞—Ä–∞–∞–≥–∏–π–Ω –∂–∏–∂–∏–≥ —Ö—ç—Å–≥–∏–π–≥ —Ç–æ–¥—Ä—É—É–ª—ä—è.'
      : ' –•“Ø—Å–≤—ç–ª —Ü–∞–∞—à —è—Ä–∏–ª—Ü—ä—è. üí¨';
  // –ê–ª—å —Ö—ç–¥–∏–π–Ω –∞—Å—É—É–ª—Ç–∞–∞—Ä —Ç”©–≥—Å—Å”©–Ω –±–æ–ª –Ω—ç–º—ç—Ö–≥“Ø–π
  return /[?!]$/.test(s) ? s : s + end;
}
